/**
 * Cache computed groups by modifiers and selectors for performance
 */
const cachedGroupsByModifiersAndSelectors = new Map<string, string[]>()

/**
 * Generates an ordered list of groups associated to modifiers and selectors entered
 * The groups are generated by combining all possible combinations of modifiers with one selector in the end
 * @param modifiers List of modifiers associated to the selector, i.e ['abstract', 'protected']
 * @param selectors List of selectors, i.e ['get-method', 'method', 'property']
 */
export const generateOfficialGroups = (
  modifiers: string[],
  selectors: string[],
): string[] => {
  let modifiersAndSelectorsKey = modifiers.join('&') + '/' + selectors.join('&')
  let cachedValue = cachedGroupsByModifiersAndSelectors.get(
    modifiersAndSelectorsKey,
  )
  if (cachedValue) {
    return cachedValue
  }
  let allModifiersCombinations: string[][] = []
  for (let i = modifiers.length; i > 0; i--) {
    allModifiersCombinations = [
      ...allModifiersCombinations,
      ...getCombinations(modifiers, i),
    ]
  }
  let allPossibleModifiersCombinationPermutations = allModifiersCombinations
    .map(result => getPermutations(result))
    .flat()
  let returnValue: string[] = []
  for (let selector of selectors) {
    returnValue = [
      ...returnValue,
      ...allPossibleModifiersCombinationPermutations.map(modifiersCombination =>
        [...modifiersCombination, selector].join('-'),
      ),
      selector,
    ]
  }
  cachedGroupsByModifiersAndSelectors.set(modifiersAndSelectorsKey, returnValue)
  return returnValue
}

/**
 * Get possible combinations of n elements from an array
 */
const getCombinations = (array: string[], n: number): string[][] => {
  let result: string[][] = []

  let backtrack = (start: number, comb: string[]) => {
    if (comb.length === n) {
      result.push([...comb])
      return
    }
    for (let i = start; i < array.length; i++) {
      comb.push(array[i])
      backtrack(i + 1, comb)
      comb.pop()
    }
  }

  backtrack(0, [])
  return result
}

/**
 * Get all permutations of an array
 * This allows 'abstract-override-protected-get-method', 'override-protected-abstract-get-method',
 * 'protected-abstract-override-get-method'... to be entered by the user and always match the same group
 *
 */
const getPermutations = (elements: string[]): string[][] => {
  let result: string[][] = []
  let backtrack = (first: number) => {
    if (first === elements.length) {
      result.push([...elements])
      return
    }
    for (let i = first; i < elements.length; i++) {
      ;[elements[first], elements[i]] = [elements[i], elements[first]]
      backtrack(first + 1)
      ;[elements[first], elements[i]] = [elements[i], elements[first]]
    }
  }
  backtrack(0)

  return result
}
