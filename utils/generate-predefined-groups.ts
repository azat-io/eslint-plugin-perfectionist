import { getArrayCombinations } from './get-array-combinations'

interface Props {
  cache: Map<string, string[]>
  modifiers: string[]
  selectors: string[]
}

/**
 * Generates an ordered list of group names associated with the provided
 * modifiers and selectors. The groups are generated by combining all possible
 * combinations of modifiers with each selector at the end. Selectors are
 * prioritized over the quantity of modifiers. For example,
 * `protected abstract override get fields();` should prioritize the
 * `'get-method'` group over the `'protected-abstract-override-method'` group.
 * @param {Props} props - The properties including selectors, modifiers, and
 * cache.
 * @param {string[]} props.selectors - The list of selectors.
 * @param {string[]} props.modifiers - The list of modifiers.
 * @param {Map<string, string[]>} props.cache - Cache to store computed groups.
 * @returns {string[]} An array of generated group names.
 */
export let generatePredefinedGroups = ({
  selectors,
  modifiers,
  cache,
}: Props): string[] => {
  let modifiersAndSelectorsKey = `${modifiers.join('&')}/${selectors.join('&')}`
  let cachedValue = cache.get(modifiersAndSelectorsKey)
  if (cachedValue) {
    return cachedValue
  }
  let allModifiersCombinations: string[][] = []
  for (let i = modifiers.length; i > 0; i--) {
    allModifiersCombinations = [
      ...allModifiersCombinations,
      ...getArrayCombinations(modifiers, i),
    ]
  }
  let allModifiersCombinationPermutations = allModifiersCombinations.flatMap(
    result => getPermutations(result),
  )
  let returnValue: string[] = []
  for (let selector of selectors) {
    returnValue = [
      ...returnValue,
      ...allModifiersCombinationPermutations.map(
        modifiersCombinationPermutation =>
          [...modifiersCombinationPermutation, selector].join('-'),
      ),
      selector,
    ]
  }
  cache.set(modifiersAndSelectorsKey, returnValue)
  return returnValue
}

/**
 * Generates all permutations of an array. This allows variations like
 * `'abstract-override-protected-get-method'`,
 * `'override-protected-abstract-get-method'`,
 * `'protected-abstract-override-get-method'`, etc., to be entered by the user
 * and always match the same group. Note that this can theoretically cause
 * performance issues if too many modifiers are entered at once (e.g.,
 * 8 modifiers result in 40,320 permutations, 9 in 362,880).
 * @param {string[]} elements - The array of elements to permute.
 * @returns {string[][]} An array containing all permutations of the input
 * elements.
 */
let getPermutations = (elements: string[]): string[][] => {
  let result: string[][] = []
  let backtrack = (first: number): void => {
    if (first === elements.length) {
      result.push([...elements])
      return
    }
    for (let i = first; i < elements.length; i++) {
      ;[elements[first], elements[i]] = [elements[i], elements[first]]
      backtrack(first + 1)
      ;[elements[first], elements[i]] = [elements[i], elements[first]]
    }
  }
  backtrack(0)

  return result
}
